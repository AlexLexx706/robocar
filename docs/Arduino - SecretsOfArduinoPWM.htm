<!DOCTYPE html>
<!-- saved from url=(0049)http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM -->
<html class=" js no-touch boxshadow opacity fontface svg inlinesvg svgclippaths no-ie8compat" lang="en"><!--<![endif]--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><script id="LR1" type="text/javascript" async="" src="./Arduino - SecretsOfArduinoPWM_files/client.js"></script><script src="./Arduino - SecretsOfArduinoPWM_files/cb=gapi.loaded_1" async=""></script><script src="./Arduino - SecretsOfArduinoPWM_files/cb=gapi.loaded_0" async=""></script><script type="text/javascript" src="./Arduino - SecretsOfArduinoPWM_files/plusone.js" gapi_processed="true"></script><script type="text/javascript" src="./Arduino - SecretsOfArduinoPWM_files/widgets.js"></script>
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
  	<meta charset="utf-8">

	<title>Arduino - SecretsOfArduinoPWM </title>
	<link rel="shortcut icon" type="image/x-icon" href="http://arduino.cc/en/favicon.png">

	<script type="text/javascript" async="" src="./Arduino - SecretsOfArduinoPWM_files/ga.js"></script><script src="./Arduino - SecretsOfArduinoPWM_files/jquery-1.10.2.min.js"></script>

	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/fonts.css" type="text/css">
	<link rel="stylesheet" href="http://arduino.cc/css/arduino-icons.css">
	<link rel="stylesheet" href="http://arduino.cc/css/animation.css"><!--[if IE 7]>
	<link rel="stylesheet" href="http://arduino.cc/css/arduino-icons-ie7.css"><![endif]-->
	<!--[if gte IE 9]><!-->
	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/foundation2.css" type="text/css">
	<!--[endif]---->
	<!--[if IE 8]>
		<link rel='stylesheet' href='http://arduino.cc/css/foundation_ie8.css' type='text/css' />	
	<![endif]-->
	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/arduino_code_highlight.css" type="text/css">
	<link rel="stylesheet" type="text/css" media="screen" href="./Arduino - SecretsOfArduinoPWM_files/typeplate.css">
	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/arduinoWide_SSO.css" type="text/css">

	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/common.css" type="text/css">
	<link href="https://plus.google.com/114839908922424087554" rel="publisher">

	<!-- embedded JS and CSS from PmWiki plugins -->	
	<!--HeaderText--><style type="text/css"><!--
  ul, ol, pre, dl, p { margin-top:0px; margin-bottom:0px; }
  code { white-space: nowrap; }
  .vspace { margin-top:1.33em; }
  .indent { margin-left:40px; }
  .outdent { margin-left:40px; text-indent:-40px; }
  a.createlinktext { text-decoration:none; border-bottom:1px dotted gray; }
  a.createlink { text-decoration:none; position:relative; top:-0.5em;
    font-weight:bold; font-size:smaller; border-bottom:none; }
  img { border:0px; }
  
span.anchor {
	float: left;
	font-size: 10px;
	margin-left: -10px;
	width: 10px;
    position:relative; top:-0.1em;
	text-align: center;
}
span.anchor a { text-decoration: none; }
span.anchor a:hover { text-decoration: underline; }
ol.toc { text-indent:-20px; list-style: none; }
ol.toc ol.toc { text-indent:-40px; }
div.tocfloat { font-size: smaller; margin-bottom: 10px;
    border-top: 1px dotted #555555; border-bottom: 1px dotted #555555;
    padding-top: 5px; padding-bottom: 5px; 
    width: 38%; float: right; margin-left: 10px; clear: right;
    margin-right:-13px; padding-right: 13px; padding-left: 13px;
    background-color: #eeeeee; }
div.toc { font-size: smaller; 
    padding: 5px; border: 1px dotted #cccccc;
    background: #f7f7f7;
    margin-bottom: 10px; }
div.toc p { background-color: #f9f6d6;
    margin-top:-5px;   padding-top: 5px;
    margin-left:-5px;  padding-left: 5px;
    margin-right:-5px; padding-right: 5px;
    padding-bottom: 3px;
    border-bottom:  1px dotted #cccccc; }.editconflict { color:green; 
  font-style:italic; margin-top:1.33em; margin-bottom:1.33em; }

  table.markup { border: 2px dotted #ccf; width:90%; }
  td.markup1, td.markup2 { padding-left:10px; padding-right:10px; }
  td.markup1 { border-bottom: 1px solid #ccf; }
  div.faq { margin-left:2em; }
  div.faq p.question { margin: 1em 0 0.75em -2em; font-weight:bold; }
  div.faq hr { margin-left: -2em; }
   
    .frame 
      { border:1px solid #cccccc; padding:4px; background-color:#f9f9f9; }
    .lfloat { float:left; margin-right:0.5em; }
    .rfloat { float:right; margin-left:0.5em; }
a.varlink { text-decoration:none; }

--></style><script type="text/javascript">
function toggle(obj) {
    var elstyle = document.getElementById(obj).style;
    var text    = document.getElementById(obj + "tog");
    if (elstyle.display == 'none') {
        elstyle.display = 'block';
        text.innerHTML = "hide";
    } else {
        elstyle.display = 'none';
        text.innerHTML = "show";
    }
}
</script>  <meta name="robots" content="index,follow">


	<script src="./Arduino - SecretsOfArduinoPWM_files/custom.modernizr.js"></script>

	<!-- do not remove none of those lines, comments embedding in pages will break! -->
	<script src="./Arduino - SecretsOfArduinoPWM_files/jquery-ui.min.js" type="text/javascript"></script>
	<link rel="stylesheet" href="./Arduino - SecretsOfArduinoPWM_files/jquery-ui.min.css" type="text/css">
	<script src="./Arduino - SecretsOfArduinoPWM_files/saved_resource" type="text/javascript"></script>
<link rel="stylesheet" type="text/css" href="./Arduino - SecretsOfArduinoPWM_files/widget005.old.css" media="all"><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif);cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif)}.fb_dialog_close_icon:active{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent;_background-image:url(http://static.ak.fbcdn.net/rsrc.php/v2/yL/r/s816eWC-2sl.gif)}.fb_dialog_loader{background-color:#f2f2f2;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #3b5998;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{max-height:590px;min-height:590px;max-width:500px;min-width:500px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;left:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29447e;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f2f2f2;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(http://static.ak.fbcdn.net/rsrc.php/v2/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}
.fbpluginrecommendationsbarleft,.fbpluginrecommendationsbarright{position:fixed !important;bottom:0;z-index:999}.fbpluginrecommendationsbarleft{left:10px}.fbpluginrecommendationsbarright{right:10px}</style><style type="text/css"></style></head>
<body data-twttr-rendered="true" style="padding-top: 40px;"><iframe id="twttrHubFrameSecure" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" name="twttrHubFrameSecure" src="./Arduino - SecretsOfArduinoPWM_files/hub(1).htm" style="position: absolute; top: -9999em; width: 10px; height: 10px;"></iframe><iframe id="twttrHubFrame" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0" name="twttrHubFrame" src="./Arduino - SecretsOfArduinoPWM_files/hub.htm" style="position: absolute; top: -9999em; width: 10px; height: 10px;"></iframe>

	<div id="menuWings" class="fixed" style="display: block;"></div>
	<div id="page">
		
		
<script>
	var userAgent = (navigator.userAgent || navigator.vendor || window.opera).toLowerCase();
	if(userAgent.indexOf('mac')>0){
		$("head").append('<style type="text/css">@-moz-document url-prefix() {h1 a, h2 a, h3 a, h4 a, h5 a, h1 a:hover, h2 a:hover, th a, th a:hover, h3 a:hover, h4 a:hover, h5 a:hover, #wikitext h2 a:hover, #wikitext h3 a:hover, #wikitext h4 a:hover {padding-bottom: 0.5em!important;} #pageheader .search input{font-family: "TyponineSans Regular 18";} #pagefooter .monospace{margin-top: -4px;} #navWrapper ul.left &gt; li{margin-top: -2px; padding-bottom: 2px;}#navWrapper ul.right &gt; li{margin-top: -5px; padding-bottom: 5px;}#navWrapper ul.right &gt; li ul{margin-top: 4px;} .slider-container .fixed-caption p{padding:8px 0 14px 0}}</style>');
	}
</script>

<!--[if IE]>
<link rel='stylesheet' href='https://id.arduino.cc//css/ie-monospace.css' type='text/css' />
<![endif]-->

<div id="menuWings" class="fixed"></div>

<!--[if IE 8]>
<div class="alert-box panel ie8alert">
  <p><strong>Arduino.cc offers limited compatibility for Internet Explorer 8. Get a modern browser as Chrome, Firefox or Safari.</strong></p>
  <a href="" class="close">&times;</a>
</div>
<![endif]-->

<div id="pageheader">
	<div class="row">
		<div class="small-6 large-8 eight columns">
			<div class="title"><a href="http://arduino.cc/">Arduino</a></div>
		</div>
		<div class="small-6 large-4 four columns search">
			<div class="row collapse">
				<form method="GET" action="http://www.google.com/search">
	<div class="small-12 twelve columns">
		<i class="icon-search-2"></i>
		<input type="hidden" name="ie" value="UTF-8">
		<input type="hidden" name="oe" value="UTF-8">
		<input type="text" name="q" size="25" maxlength="255" value="" placeholder="Search the Arduino Website">
		<input type="submit" name="btnG" value="search">
		<input type="hidden" name="domains" value="http://arduino.cc">
		<input type="hidden" name="sitesearch" value="http://arduino.cc">
	</div>
</form>			</div>
		</div>
	</div>

	<!--[if gte IE 9]><!-->
	<div id="navWrapper" class="sticky fixed">
	<!--[endif]---->
	<!--[if IE 8]>
		<div id="navWrapper">
	<![endif]-->
		<nav class="top-bar" data-options="is_hover:true">
			<ul class="title-area">
				<li class="name"></li>
			</ul>

			
		<section class="top-bar-section">
				<ul class="left">
					<li id="navLogo" style="display: block;">
						<a href="http://arduino.cc/">
							<img src="./Arduino - SecretsOfArduinoPWM_files/logo_46.png" alt="userpicture">
						</a>
					</li>
					<li id="navHome" style="display: none;"><a href="http://arduino.cc/">Home</a></li>
					<li><a href="http://store.arduino.cc/">Buy</a></li>
					<li><a href="http://arduino.cc/en/Main/Software">Download</a></li>
					<li class="has-dropdown not-click"><a href="http://arduino.cc/en/Main/Products">Products</a>
						<ul class="dropdown"><li class="title back js-generated"><h5><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM#"><span class="backArrow">Back</span></a></h5></li><li><a class="parent-link js-generated" href="http://arduino.cc/en/Main/Products">Products</a></li>
							<li><a href="http://arduino.cc/en/Main/Products">Arduino</a></li>
							<li><a href="http://arduino.cc/en/ArduinoAtHeart/Products">AtHeart</a></li>
							<li><a href="http://arduino.cc/en/ArduinoCertified/Products">Certified</a></li>
						</ul>
					</li>
					<li class="has-dropdown active not-click"><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM#">Learning</a>
						<ul class="dropdown"><li class="title back js-generated"><h5><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM#"><span class="backArrow">Back</span></a></h5></li>
							<li><a href="http://arduino.cc/en/Guide/HomePage">Getting started</a></li>
							<li><a href="http://arduino.cc/en/Tutorial/HomePage">Examples</a></li>
							<li><a href="http://playground.arduino.cc/">Playground</a></li>
						</ul>
					</li>
					<li><a href="http://arduino.cc/en/Reference/HomePage">Reference</a></li>
					<li class="has-dropdown not-click"><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM#">Support</a>
						<ul class="dropdown"><li class="title back js-generated"><h5><a href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM#"><span class="backArrow">Back</span></a></h5></li>
							<li><a href="http://arduino.cc/en/Main/FAQ">FAQ</a></li>
							<li><a href="http://forum.arduino.cc/">Forum</a></li>
							<li><a href="http://arduino.cc/en/ContactUs">Contact Us</a></li>
						</ul>
					</li>
					<li><a href="http://blog.arduino.cc/">Blog</a></li>
				</ul>

								<ul class="right">
					<li><a href="https://id.arduino.cc/auth/login/?returnurl=http%3A%2F%2Farduino.cc%2Fen%2FTutorial%2FSecretsOfArduinoPWM" class="cart">LOG IN</a></li>
					<li><a href="https://id.arduino.cc/auth/signup" class="cart">SIGN UP</a></li>
				</ul>
							</section></nav>
	</div>
</div>



		<br class="clear">

		<div id="pagetext">
				<!--PageText-->
<div id="wikitext">
<p><strong>Learning</strong> &nbsp;  <a class="wikilink" href="http://arduino.cc/en/Tutorial/HomePage">Examples</a> | <a class="wikilink" href="http://arduino.cc/en/Tutorial/Foundations">Foundations</a> | <a class="wikilink" href="http://arduino.cc/en/Hacking/HomePage">Hacking</a> | <a class="wikilink" href="http://arduino.cc/en/Tutorial/Links">Links</a>
</p>
<p class="vspace"></p><h2>Secrets of Arduino PWM</h2>
<p>by Ken Shirriff<br>with further editing by Paul Badger<br><a class="urllink" href="http://arcfn.com/2009/07/secrets-of-arduino-pwm.html" rel="nofollow" target="_blank">the original document</a>
</p>
<p class="vspace"></p><p>Pulse-width modulation (PWM) can be implemented on the Arduino in several ways. This article explains simple PWM techniques, as well as how to use the PWM registers directly for more control over the duty cycle and frequency. This article focuses on the Arduino Diecimila and Duemilanove models, which use the <span class="wikiword">ATmega168</span> or <span class="wikiword">ATmega328</span>.
</p>
<p class="vspace"></p><p>If you're unfamiliar with Pulse Width Modulation, see the tutorial. Briefly, a PWM signal is a digital square wave, where the frequency is constant, but that fraction of the time the signal is on (the duty cycle) can be varied between 0 and 100%. <img src="./Arduino - SecretsOfArduinoPWM_files/pwm1.gif" alt="" title="">
</p>
<p class="vspace"></p><h2>PWM examples</h2>
<p>PWM has several uses:
</p>
<p class="vspace"></p><ul><li>Dimming an LED
</li><li>Providing an analog output; if the digital output is filtered,<br> it will provide an analog voltage between 0% and 100% .
</li><li>Generating audio signals.
</li><li>Providing variable speed control for motors.
</li><li>Generating a modulated signal, for example to drive an infrared LED for a remote control. 
</li></ul><p class="vspace"></p><h4>Simple Pulse Width Modulation with analogWrite</h4>
<p>The Arduino's programming language makes PWM easy to use; simply call analogWrite(pin, dutyCycle), where dutyCycle is a value from 0 to 255, and pin is one of the PWM pins (3, 5, 6, 9, 10, or 11). The analogWrite function provides a simple interface to the hardware PWM, but doesn't provide any control over frequency. (Note that despite the function name, the output is a digital signal, often referred to as a square wave.)
</p>
<p class="vspace"></p><p>Probably 99% of the readers can stop here, and just use analogWrite, but there are other options that provide more flexibility.
</p>
<p class="vspace"></p><h2>Bit-banging Pulse Width Modulation</h2>
<p>You can "manually" implement PWM on any pin by repeatedly turning the pin on and off for the desired times. e.g.
</p>
<p class="vspace"></p><pre>void setup()
{
  pinMode(13, OUTPUT);
}

void loop()
{
  digitalWrite(13, HIGH);
  delayMicroseconds(100); // Approximately 10% duty cycle @ 1KHz
  digitalWrite(13, LOW);
  delayMicroseconds(1000 - 100);
}
</pre>
<p class="vspace"></p><p>This technique has the advantage that it can use any digital output pin. In addition, you have full control the duty cycle and frequency. One major disadvantage is that any interrupts will affect the timing, which can cause considerable jitter unless you disable interrupts. A second disadvantage is you can't leave the output running while the processor does something else. Finally, it's difficult to determine the appropriate constants for a particular duty cycle and frequency unless you either carefully count cycles, or tweak the values while watching an oscilloscope.
</p>
<p class="vspace"></p><p>A more elaborate example of manually <span class="wikiword">PWMing</span> all pins may be found <a class="urllink" href="http://www.arduino.cc/playground/Main/PWMallPins" rel="nofollow">here</a>.
</p>
<p class="vspace"></p><h2>Using the <span class="wikiword">ATmega</span> PWM registers directly</h2>
<p>The <span class="wikiword">ATmega168P</span>/328P chip has three PWM timers, controlling 6 PWM outputs. By manipulating the chip's timer registers directly, you can obtain more control than the analogWrite function provides.
</p>
<p class="vspace"></p><p>The AVR <span class="wikiword">ATmega328P</span> datasheet provides a detailed description of the PWM timers, but the datasheet can be difficult to understand, due to the many different control and output modes of the timers.
</p>
<p class="vspace"></p><p>A word on the relationship between the Arduino language and the datasheet may be in order here. 
</p>
<p class="vspace"></p><h4>The Atmega 168/328 timers.</h4>
<p>The <span class="wikiword">ATmega328P</span> has three timers known as Timer 0, Timer 1, and Timer 2. Each timer has two output compare registers that control the PWM width for the timer's two outputs: when the timer reaches the compare register value, the corresponding output is toggled. The two outputs for each timer will normally have the same frequency, but can have different duty cycles (depending on the respective output compare register).
</p>
<p class="vspace"></p><p>Each of the timers has a prescaler that generates the timer clock by dividing the system clock by a prescale factor such as 1, 8, 64, 256, or 1024. The Arduino has a system clock of 16MHz and the timer clock frequency will be the system clock frequency divided by the prescale factor. Note that Timer 2 has a different set of prescale values from the other timers.
</p>
<p class="vspace"></p><p>The timers are complicated by several different modes. The main PWM modes are "Fast PWM" and "Phase-correct PWM", which will be described below. The timer can either run from 0 to 255, or from 0 to a fixed value. (The 16-bit Timer 1 has additional modes to supports timer values up to 16 bits.) Each output can also be inverted.
</p>
<p class="vspace"></p><p>The timers can also generate interrupts on overflow and/or match against either output compare register, but that's beyond the scope of this article.
Timer Registers
Several registers are used to control each timer. The Timer/Counter Control Registers <span class="wikiword">TCCRnA</span> and <span class="wikiword">TCCRnB</span> hold the main control bits for the timer. (Note that <span class="wikiword">TCCRnA</span> and <span class="wikiword">TCCRnB</span> do not correspond to the outputs A and B.) These registers hold several groups of bits:
</p>
<p class="vspace"></p><ul><li>Waveform Generation Mode bits (WGM): these control the overall mode of the timer.<br> (These bits are split between <span class="wikiword">TCCRnA</span> and <span class="wikiword">TCCRnB</span>.)
</li><li>Clock Select bits (CS): these control the clock prescaler
</li><li>Compare Match Output A Mode bits (<span class="wikiword">COMnA</span>): these enable/disable/invert output A
</li><li>Compare Match Output B Mode bits (<span class="wikiword">COMnB</span>): these enable/disable/invert output B 
</li></ul><p class="vspace"></p><p>The Output Compare Registers <span class="wikiword">OCRnA</span> and <span class="wikiword">OCRnB</span> set the levels at which outputs A and B will be affected. When the timer value matches the register value, the corresponding output will be modified as specified by the mode.
</p>
<p class="vspace"></p><p>The bits are slightly different for each timer, so consult the datasheet for details. Timer 1 is a 16-bit timer and has additional modes. Timer 2 has different prescaler values.
</p>
<p class="vspace"></p><h4>Fast PWM</h4>
<p>In the simplest PWM mode, the timer repeatedly counts from 0 to 255. The output turns on when the timer is at 0, and turns off when the timer matches the output compare register. The higher the value in the output compare register, the higher the duty cycle. This mode is known as Fast PWM Mode.
The following diagram shows the outputs for two particular values of <span class="wikiword">OCRnA</span> and <span class="wikiword">OCRnB</span>. Note that both outputs have the same frequncy, matching the frequency of a complete timer cycle.
</p>
<p class="vspace"></p><h4>Fast PWM Mode</h4>
<p>The following code fragment sets up fast PWM on pins 3 and 11 (Timer 2). To summarize the register settings, setting the waveform generation mode bits WGM to 011 selects fast PWM. Setting the <span class="wikiword">COM2A</span> bits and <span class="wikiword">COM2B</span> bits to 10 provides non-inverted PWM for outputs A and B. Setting the CS bits to 100 sets the prescaler to divide the clock by 64. (Since the bits are different for the different timers, consult the datasheet for the right values.) The output compare registers are arbitrarily set to 180 and 50 to control the PWM duty cycle of outputs A and B. (Of course, you can modify the registers directly instead of using pinMode, but you do need to set the pins to output.)
</p>
<p class="vspace"></p><pre>  pinMode(3, OUTPUT);
  pinMode(11, OUTPUT);
  TCCR2A = _BV(COM2A1) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(CS22);
  OCR2A = 180;
  OCR2B = 50;
</pre>
<p class="vspace"></p><p>On the Arduino Duemilanove, these values yield:
</p>
<p class="vspace"></p><ul><li>Output A frequency: 16 <span class="wikiword">MHz</span> / 64 / 256 = 976.5625Hz
</li><li>Output A duty cycle: (180+1) / 256 = 70.7%
</li><li>Output B frequency: 16 <span class="wikiword">MHz</span> / 64 / 256 = 976.5625Hz
</li><li>Output B duty cycle: (50+1) / 256 = 19.9% 
</li></ul><p class="vspace"></p><p>The output frequency is the 16MHz system clock frequency, divided by the prescaler value (64), divided by the 256 cycles it takes for the timer to wrap around. Note that fast PWM holds the output high one cycle longer than the compare register value.
</p>
<p class="vspace"></p><h4>Phase-Correct PWM</h4>
<p>The second PWM mode is called phase-correct PWM. In this mode, the timer counts from 0 to 255 and then back down to 0. The output turns off as the timer hits the output compare register value on the way up, and turns back on as the timer hits the output compare register value on the way down. The result is a more symmetrical output. The output frequency will be approximately half of the value for fast PWM mode, because the timer runs both up and down.
</p>
<p class="vspace"></p><h4>Phase-Correct PWM example</h4>
<p>The following code fragment sets up phase-correct PWM on pins 3 and 11 (Timer 2). The waveform generation mode bits WGM are set to to 001 for phase-correct PWM. The other bits are the same as for fast PWM.
</p>
<p class="vspace"></p><pre>  pinMode(3, OUTPUT);
  pinMode(11, OUTPUT);
  <span class="wikiword">TCCR2A</span> = _BV(<span class="wikiword">COM2A1</span>) | _BV(<span class="wikiword">COM2B1</span>) | _BV(<span class="wikiword">WGM20</span>);
  <span class="wikiword">TCCR2B</span> = _BV(<span class="wikiword">CS22</span>);
  <span class="wikiword">OCR2A</span> = 180;
  <span class="wikiword">OCR2B</span> = 50;
</pre>
<p class="vspace"></p><p>On the Arduino Duemilanove, these values yield:
</p>
<p class="vspace"></p><ul><li>Output A frequency: 16 <span class="wikiword">MHz</span> / 64 / 255 / 2 = 490.196Hz
</li><li>Output A duty cycle: 180 / 255 = 70.6%
</li><li>Output B frequency: 16 <span class="wikiword">MHz</span> / 64 / 255 / 2 = 490.196Hz
</li><li>Output B duty cycle: 50 / 255 = 19.6% 
</li></ul><p class="vspace"></p><p>Phase-correct PWM divides the frequency by two compared to fast PWM, because the timer goes both up and down. Somewhat surprisingly, the frequency is divided by 255 instead of 256, and the duty cycle calculations do not add one as for fast PWM. See the explanation below under "Off-by-one".
</p>
<p class="vspace"></p><h4>Varying the timer top limit: fast PWM</h4>
<p>Both fast PWM and phase correct PWM have an additional mode that gives control over the output frequency. In this mode, the timer counts from 0 to OCRA (the value of output compare register A), rather than from 0 to 255. This gives much more control over the output frequency than the previous modes. (For even more frequency control, use the 16-bit Timer 1.)
</p>
<p class="vspace"></p><p>Note that in this mode, only output B can be used for PWM; OCRA cannot be used both as the top value and the PWM compare value. However, there is a special-case mode "Toggle <span class="wikiword">OCnA</span> on Compare Match" that will toggle output A at the end of each cycle, generating a fixed 50% duty cycle and half frequency in this case. The examples will use this mode.
</p>
<p class="vspace"></p><p>In the following diagram, the timer resets when it matches <span class="wikiword">OCRnA</span>, yielding a faster output frequency for <span class="wikiword">OCnB</span> than in the previous diagrams. Note how <span class="wikiword">OCnA</span> toggles once for each timer reset.
</p>
<p class="vspace"></p><h4>Fast PWM Mode with OCRA top</h4>
<p>The following code fragment sets up fast PWM on pins 3 and 11 (Timer 2), using <span class="wikiword">OCR2A</span> as the top value for the timer. The waveform generation mode bits WGM are set to to 111 for fast PWM with OCRA controlling the top limit. The <span class="wikiword">OCR2A</span> top limit is arbitrarily set to 180, and the <span class="wikiword">OCR2B</span> compare register is arbitrarily set to 50. <span class="wikiword">OCR2A</span>'s mode is set to "Toggle on Compare Match" by setting the <span class="wikiword">COM2A</span> bits to 01.
</p><pre>  pinMode(3, OUTPUT);
  pinMode(11, OUTPUT);
  TCCR2A = _BV(COM2A0) | _BV(COM2B1) | _BV(WGM21) | _BV(WGM20);
  TCCR2B = _BV(WGM22) | _BV(CS22);
  OCR2A = 180;
  OCR2B = 50;
</pre>
<p class="vspace"></p><p>On the Arduino Duemilanove, these values yield:
</p>
<p class="vspace"></p><ul><li>Output A frequency: 16 <span class="wikiword">MHz</span> / 64 / (180+1) / 2 = 690.6Hz
</li><li>Output A duty cycle: 50%
</li><li>Output B frequency: 16 <span class="wikiword">MHz</span> / 64 / (180+1) = 1381.2Hz
</li><li>Output B duty cycle: (50+1) / (180+1) = 28.2% 
</li></ul><p class="vspace"></p><p>Note that in this example, the timer goes from 0 to 180, which takes 181 clock cycles, so the output frequency is divided by 181. Output A has half the frequency of Output B because the Toggle on Compare Match mode toggles Output A once each complete timer cycle.
</p>
<p class="vspace"></p><h4>Varying the timer top limit: phase-correct PWM</h4>
<p>Similarly, the timer can be configured in phase-correct PWM mode to reset when it reaches <span class="wikiword">OCRnA</span>.
Phase-Correct PWM with OCRA top
The following code fragment sets up phase-correct PWM on pins 3 and 11 (Timer 2), using <span class="wikiword">OCR2A</span> as the top value for the timer. The waveform generation mode bits WGM are set to to 101 for phase-correct PWM with OCRA controlling the top limit. The <span class="wikiword">OCR2A</span> top limit is arbitrarily set to 180, and the <span class="wikiword">OCR2B</span> compare register is arbitrarily set to 50. <span class="wikiword">OCR2A</span>'s mode is set to "Toggle on Compare Match" by setting the <span class="wikiword">COM2A</span> bits to 01.
</p>
<p class="vspace"></p><pre>  pinMode(3, OUTPUT);
  pinMode(11, OUTPUT);
  TCCR2A = _BV(COM2A0) | _BV(COM2B1) | _BV(WGM20);
  TCCR2B = _BV(WGM22) | _BV(CS22);
  OCR2A = 180;
  OCR2B = 50;
</pre>
<p class="vspace"></p><p>On the Arduino Duemilanove, these values yield:
</p>
<p class="vspace"></p><ul><li>Output A frequency: 16 <span class="wikiword">MHz</span> / 64 / 180 / 2 / 2 = 347.2Hz
</li><li>Output A duty cycle: 50%
</li><li>Output B frequency: 16 <span class="wikiword">MHz</span> / 64 / 180 / 2 = 694.4Hz
</li><li>Output B duty cycle: 50 / 180 = 27.8% 
</li></ul><p class="vspace"></p><p>Note that in this example, the timer goes from 0 to 180 and back to 0, which takes 360 clock cycles. Thus, everything is divided by 180 or 360, unlike the fast PWM case, which divided everything by 181; see below for details.
Off-by-one
You may have noticed that fast PWM and phase-correct PWM seem to be off-by-one with respect to each other, dividing by 256 versus 255 and adding one in various places. The documentation is a bit opaque here, so I'll explain in a bit of detail.
</p>
<p class="vspace"></p><p>Suppose the timer is set to fast PWM mode and is set to count up to an <span class="wikiword">OCRnA</span> value of 3. The timer will take on the values 012301230123... Note that there are 4 clock cycles in each timer cycle. Thus, the frequency will be divided by 4, not 3. The duty cycle will be a multiple of 25%, since the output can be high for 0, 1, 2, 3, or 4 cycles out of the four. Likewise, if the timer counts up to 255, there will be 256 clock cycles in each timer cycle, and the duty cycle will be a multiple of 1/256. To summarize, fast PWM divides by N+1 where N is the maximum timer value (either <span class="wikiword">OCRnA</span> or 255).
</p>
<p class="vspace"></p><p>Now consider phase-correct PWM mode with the timer counting up to an <span class="wikiword">OCRnA</span> value of 3. The timer values will be 012321012321... There are 6 clock cycles in each timer cycle (012321). Thus the frequency will be divided by 6. The duty cycle will be a multiple of 33%, since the output can be high for 0, 2, 4, or 6 of the 6 cycles. Likewise, if the timer counts up to 255 and back down, there will be 510 clock cycles in each timer cycle, and the duty cycle will be a multiple of 1/255. To summarize, phase-correct PWM divides by 2N, where N is the maximum timer value.
</p>
<p class="vspace"></p><p>The second important timing difference is that fast PWM holds the output high for one cycle longer than the output compare register value. The motivation for this is that for fast PWM counting to 255, the duty cycle can be from 0 to 256 cycles, but the output compare register can only hold a value from 0 to 255. What happens to the missing value? The fast PWM mode keeps the output high for N+1 cycles when the output compare register is set to N so an output compare register value of 255 is 100% duty cycle, but an output compare register value of 0 is not 0% duty cycle but 1/256 duty cycle. This is unlike phase-correct PWM, where a register value of 255 is 100% duty cycle and a value of 0 is a 0% duty cycle.
Timers and the Arduino
The Arduino supports PWM on a subset of its output pins. It may not be immediately obvious which timer controls which output, but the following table will clarify the situation. It gives for each timer output the output pin on the Arduino (i.e. the silkscreened label on the board), the pin on the <span class="wikiword">ATmega</span> chip, and the name and bit of the output port. For instance Timer 0 output <span class="wikiword">OC0A</span> is connected to the Arduino output pin 6; it uses chip pin 12 which is also known as <span class="wikiword">PD6</span>.
Timer output	Arduino output	Chip pin	Pin name
<span class="wikiword">OC0A</span>	6	12	<span class="wikiword">PD6</span>
<span class="wikiword">OC0B</span>	5	11	<span class="wikiword">PD5</span>
<span class="wikiword">OC1A</span>	9	15	<span class="wikiword">PB1</span>
<span class="wikiword">OC1B</span>	10	16	<span class="wikiword">PB2</span>
<span class="wikiword">OC2A</span>	11	17	<span class="wikiword">PB3</span>
<span class="wikiword">OC2B</span>	3	5	<span class="wikiword">PD3</span>
</p>
<p class="vspace"></p><p>The Arduino performs some initialization of the timers. The Arduino initializes the prescaler on all three timers to divide the clock by 64. Timer 0 is initialized to Fast PWM, while Timer 1 and Timer 2 is initialized to Phase Correct PWM. See the Arduino source file wiring.c for details.
</p>
<p class="vspace"></p><p>The Arduino uses Timer 0 internally for the millis() and delay() functions, so be warned that changing the frequency of this timer will cause those functions to be erroneous. Using the PWM outputs is safe if you don't change the frequency, though.
</p>
<p class="vspace"></p><p>The analogWrite(pin, duty_cycle) function sets the appropriate pin to PWM and sets the appropriate output compare register to duty_cycle (with the special case for duty cycle of 0 on Timer 0). The digitalWrite() function turns off PWM output if called on a timer pin. The relevant code is wiring_analog.c and wiring_digital.c.
</p>
<p class="vspace"></p><p>If you use analogWrite(5, 0) you get a duty cycle of 0%, even though pin 5's timer (Timer 0) is using fast PWM. How can this be, when a fast PWM value of 0 yields a duty cycle of 1/256 as explained above? The answer is that analogWrite "cheats"; it has special-case code to explicitly turn off the pin when called on Timer 0 with a duty cycle of 0. As a consequency, the duty cycle of 1/256 is unavailable when you use analogWrite on Timer0, and there is a jump in the actual duty cycle between values of 0 and 1.
</p>
<p class="vspace"></p><p>Some other Arduino models use dfferent AVR processors with similar timers. The Arduino Mega uses the <span class="wikiword">ATmega1280</span> (datasheet), which has four 16-bit timers with 3 outputs each and two 8-bit timers with 2 outputs each. Only 14 of the PWM outputs are supported by the Arduino Wiring library, however. Some older Arduino models use the <span class="wikiword">ATmega8</span> (datasheet), which has three timers but only 3 PWM outputs: Timer 0 has no PWM, Timer 1 is 16 bits and has two PWM outputs, and Timer 2 is 8 bits and has one PWM output.
Troubleshooting
It can be tricky to get the PWM outputs to work. Some tips:
</p>
<p class="vspace"></p><ul><li>You need to both enable the pin for output and enable the PWM mode on the pin<br>in order to get any output.<br>I.e. you need to do pinMode() and set the COM bits.
</li><li>The different timers use the control bits and prescaler differently;<br>check the documentation for the appropriate timer.
</li><li>Some combinations of bits that you might expect to work are reserved,<br>which means if you try to use them, they won't work.<br>For example, toggle mode doesn't work with fast PWM to 255, or with output B.
</li><li>Make sure the bits are set the way you think. Bit operations can be tricky,<br>so print out the register values with the binary (BIN) formatter and make sure they are what you expect.
</li><li>Make sure you're using the right output pins. See the table above.
</li><li>You'll probably want a decoupling capacitor to avoid spikes on the output. 
</li></ul><p class="vspace"></p><p>An oscilloscope is very handy for debugging PWM if you have access to one. If you don't have one, I recommend using your sound card and a program such as xoscope.
</p>
<p class="vspace"></p><h4>Conclusion</h4>
<p>I hope this article helps explain the PWM modes of the Arduino. I found the documentation of the different modes somewhat opaque, and the off-by-one issues unexplained. Please let me know if you encounter any errors.
</p>
</div>

				
				<!-- AddThis Button Style BEGIN -->
<style>
  .addthis_toolbox {
    margin: 2em 0 1em;
  }
  .addthis_toolbox img {
    float: left;
    height: 25px;
    margin-right: 10px;
    width: auto;
  }
  .addthis_toolbox .social-container {
    float: left;
    height: 27px; 
    width: auto; 
  }
  .addthis_toolbox .social-container .social-content {
    float: left;
    margin-top: 2px;
    max-width: 0;
    overflow: hidden;
    -moz-transition: max-width .3s ease-out;
    -webkit-transition: max-width .3s ease-out;
    -o-transition: max-width .3s ease-out;
    transition: max-width .3s ease-out;
  }
  .addthis_toolbox .social-container:hover .social-content {
    max-width: 100px;
    -moz-transition: max-width .2s ease-in;
    -webkit-transition: max-width .2s ease-in;
    -o-transition: max-width .2s ease-in;
    transition: max-width .2s ease-in;
  }
  .addthis_toolbox .social-container .social-content a {
    float: left;
    margin-right: 5px;
  }

  .addthis_toolbox h3 {
    font-size: 24px;
    text-align: left;
  }
</style>
<!-- AddThis Button Style END -->
<!-- AddThis Button BEGIN -->
<div class="addthis_toolbox addthis_default_style">
  <h3>Share</h3>
  <!-- FACEBOOK -->
  <div class="social-container">
    <img src="./Arduino - SecretsOfArduinoPWM_files/facebook.png">
    <div class="social-content">
      <a class="addthis_button_facebook_like at300b" fb:like:layout="button_count"><div class="fb-like fb_iframe_widget" data-ref=".VBCJWhf3Urk.like" data-layout="button_count" data-show_faces="false" data-action="like" data-width="90" data-font="arial" data-href="http://arduino.cc/en/Tutorial/SecretsOfArduinoPWM" data-send="false" fb-xfbml-state="rendered" fb-iframe-plugin-query="action=like&amp;app_id=172525162793917&amp;font=arial&amp;href=http%3A%2F%2Farduino.cc%2Fen%2FTutorial%2FSecretsOfArduinoPWM&amp;layout=button_count&amp;locale=en_US&amp;ref=.VBCJWhf3Urk.like&amp;sdk=joey&amp;send=false&amp;show_faces=false&amp;width=90"><span style="vertical-align: bottom; width: 80px; height: 20px;"><iframe name="fe6d4b6c" width="90px" height="1000px" frameborder="0" allowtransparency="true" scrolling="no" title="fb:like Facebook Social Plugin" src="./Arduino - SecretsOfArduinoPWM_files/like.htm" style="border: none; visibility: visible; width: 80px; height: 20px;" class=""></iframe></span></div></a>
    </div>
  </div>
  <!-- TWITTER -->
  <div class="social-container">
    <img src="./Arduino - SecretsOfArduinoPWM_files/twitter.png">
    <div class="social-content">
      <a class="addthis_button_tweet at300b"><iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" src="./Arduino - SecretsOfArduinoPWM_files/tweet_button.1409790579.htm" class="twitter-share-button twitter-tweet-button twitter-share-button twitter-count-horizontal" title="Twitter Tweet Button" data-twttr-rendered="true" style="width: 108px; height: 20px;"></iframe></a>
    </div>
  </div>
  <!-- PINTEREST -->
  <div class="social-container">
    <img src="./Arduino - SecretsOfArduinoPWM_files/pinterest.png">
    <div class="social-content">
      <a class="addthis_button_pinterest_pinit at300b" pi:pinit:url="http://www.addthis.com/features/pinterest" pi:pinit:media="http://www.addthis.com/cms-content/images/features/pinterest-lg.png"><iframe frameborder="0" role="presentation" scrolling="no" allowtransparency="true" scrollbars="no" style="width:40px; height:25px;" src="./Arduino - SecretsOfArduinoPWM_files/pinit022.htm"></iframe></a>
    </div>
  </div>
  <!-- G+ -->
  <div class="social-container">
    <img src="./Arduino - SecretsOfArduinoPWM_files/gplus.png">
    <div class="social-content">
      <a class="addthis_button_google_plusone at300b" g:plusone:size="medium"><div id="___plusone_0" style="text-indent: 0px; margin: 0px; padding: 0px; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 90px; height: 20px; background: transparent;"><iframe frameborder="0" hspace="0" marginheight="0" marginwidth="0" scrolling="no" style="position: static; top: 0px; width: 90px; margin: 0px; border-style: none; left: 0px; visibility: visible; height: 20px;" tabindex="0" vspace="0" width="100%" id="I0_1410369883773" name="I0_1410369883773" src="./Arduino - SecretsOfArduinoPWM_files/fastbutton.htm" data-gapiattached="true" title="+1"></iframe></div></a>
    </div>
  </div>

  <script type="text/javascript">var addthis_config = {"data_track_addressbar":false};</script>
  <script type="text/javascript" src="./Arduino - SecretsOfArduinoPWM_files/addthis_widget.js"></script><div id="_atssh" style="visibility: hidden; height: 1px; width: 1px; position: absolute; z-index: 100000;"><iframe id="_atssh366" title="AddThis utility frame" src="./Arduino - SecretsOfArduinoPWM_files/sh171.htm" style="height: 1px; width: 1px; position: absolute; z-index: 100000; border: 0px; left: 0px; top: 0px;"></iframe></div><script type="text/javascript" src="./Arduino - SecretsOfArduinoPWM_files/core153.js"></script>
<div class="atclear"></div></div>
<!-- AddThis Button END -->

			</div> <!-- eof pagetext -->			
	
	</div> <!-- eof page -->
		
	<!--PageFooterFmt-->
	<div id="pagefooter">
		<div id="pagefooter" class="pagefooter">
  <div class="row">
    <div class="large-8 eight columns">
      <div class="large-4 four columns newsletter-box">
        <!-- Begin MailChimp Signup Form -->
        <h6>Newsletter</h6>
        <form action="http://arduino.us5.list-manage.com/subscribe/post?u=0140d17584d1c002bcd94d0e8&id=69a7d1abe4" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate="">
          <input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="Enter your email to sign up" required="">
          <i class="icon-right-small"></i>
          <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="newsletter-button">
        </form>
        <!--End mc_embed_signup-->
      </div>
      <div class="clearfix"></div>
      <ul class="inline-list">
        <li class="monospace">©2014 Arduino</li>
        <li><a href="http://arduino.cc/en/Main/CopyrightNotice">Copyright Notice</a></li>
        <li><a href="http://arduino.cc/en/Main/ContactUs">Contact us</a></li>
      </ul>
    </div>
    <div class="large-4 four columns">
      <ul id="arduinoSocialLinks" class="arduino-social-links">
        <li>
          <a href="https://twitter.com/arduino">
            <img src="./Arduino - SecretsOfArduinoPWM_files/twitter(1).png">
          </a>
        </li>
        <li>
          <a href="http://www.facebook.com/official.arduino">
            <img src="./Arduino - SecretsOfArduinoPWM_files/facebook(1).png">
          </a>
        </li>
        <li>
          <a href="https://plus.google.com/+Arduino">
            <img src="./Arduino - SecretsOfArduinoPWM_files/gplus(1).png">
          </a>
        </li>
        <li>
          <a href="http://www.flickr.com/photos/arduino_cc">
            <img src="./Arduino - SecretsOfArduinoPWM_files/flickr.png">
          </a>
        </li>
        <li>
          <a href="http://youtube.com/arduinoteam">
            <img src="./Arduino - SecretsOfArduinoPWM_files/youtube.png">
          </a>
        </li>
      </ul>
    </div>
  </div>
</div>

	</div>
	<!--/PageFooterFmt-->
	
	  <!--[if gte IE 9]><!-->
	  <script src="./Arduino - SecretsOfArduinoPWM_files/foundation.min.js"></script>
	  <script src="./Arduino - SecretsOfArduinoPWM_files/foundation.topbar.custom.js"></script>
	  <script>
	    $(document).foundation();
	  </script>
	  <!--<![endif]-->
	  <!--[if IE 8]>
	  <script src="http://arduino.cc/js/foundation_ie8.min.js"></script>
	  <script src="http://arduino.cc/js/ie8/jquery.foundation.orbit.js"></script>
	  <script src="http://arduino.cc/js/ie8/jquery.foundation.alerts.js"></script>
	  <script src="http://arduino.cc/js/app.js"></script>

	  <script>
	  $(window).load(function(){
	    $("#featured").orbit();
	  });
	  </script> 
	  <![endif]-->
	
	<script type="text/javascript">
	  var _gaq = _gaq || [];
	  _gaq.push(['_setAccount', 'UA-22581631-3']);
	  _gaq.push(['_setDomainName', 'arduino.cc']);
	  _gaq.push(['_trackPageview']);
	
	    (function() {
	    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
	    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
	    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
	  })();
	</script>

	<script>
	  $(window).load(function(){
	    $('a').each (function () {
	      href = $(this).attr ('href');
	      if (href.substring (0, 4) == 'http' && href.indexOf ('arduino.cc') == -1)
	        $(this).attr ('target', '_blank');
	    });
	  });
	</script>


<div id="fb-root" class=" fb_reset"><script src="./Arduino - SecretsOfArduinoPWM_files/all.js" async=""></script><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="f1fff900" frameborder="0" allowtransparency="true" scrolling="no" src="./Arduino - SecretsOfArduinoPWM_files/ping.htm" style="display: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_http" frameborder="0" allowtransparency="true" scrolling="no" id="fb_xdm_frame_http" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./Arduino - SecretsOfArduinoPWM_files/ZEbdHPQfV3x.htm" style="border: none;"></iframe><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./Arduino - SecretsOfArduinoPWM_files/ZEbdHPQfV3x(1).htm" style="border: none;"></iframe></div></div></div><iframe name="oauth2relay559527917" id="oauth2relay559527917" src="./Arduino - SecretsOfArduinoPWM_files/postmessageRelay.htm" tabindex="-1" style="width: 1px; height: 1px; position: absolute; top: -100px;"></iframe></body></html>